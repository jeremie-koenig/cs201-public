<!--
  GOD KILLS A KITTEN EVERY TIME YOU EDIT THE HTML OUTPUT DIRECTLY.
  Instead, download the Markdown source from github with:

    $ git clone https://github.com/jeremie-koenig/cs201-public.git

  Then if you feel like it, send your changes to me <jk@jk.fr.eu.org>.
-->

# Racket style guide for CPSC 201


## Formatting

Because the syntax of Racket is so uniform,
it is very important
that you organize your code on the page
in a way which makes its structure evident.
Most Racket programmers employ the rules below.
If you adopt them,
you will never need to scan your code for matching parentheses;
instead, you will recognize the nesting
and content of an expression by the form of the code.

Note that DrRacket helpfully provides an automatic indentation feature:
if you select a block of code and hit the *Tab* key,
the horizontal alignment of each line in the block
will be adjusted to match the nesting of your code.


### Avoid long lines

Long lines in Racket programs are usually very hard to decipher.
Consider even the simple procedure below:

    ; Even elements of a list of numbers
    (define even-elements (lambda (lst)
      (cond
        ((null? lst) '())
        ((even? (first lst)) (cons (first lst) (even-elements (rest lst))))
        (else (even-elements (rest lst))))))

The second `cond` clause is hard to read, because
your eyes and brain need to figure out where
the condition ends and result expression begins,
and even then
the boundaries of the arguments to `cons`
are not entirely obvious.

In general,
you will want to break lines
immediately after you close one or more parentheses:

    (+ (* 2 3)
       (/ 17 5))

Notice how the closing parenthesis in the product closes the line as well.
This is a good rule of thumb to avoid too complex forms on a line
which would be difficult to read.
Reformatting `even-elements` above using this rule
gives us the more readable:

    ; Even elements of a list of numbers
    (define even-elements
      (lambda (lst)
        (cond
          ((null? lst)
           '())
          ((even? (first lst))
           (cons (first lst)
                 (even-elements (rest lst))))
          (else
           (even-elements (rest lst))))))


### Parens tend to feel lonely

Don't put closing (or opening) parens on a line of their own. They get
lonely easily. Seriously, it's superfluous information and takes up
lines for nothing. Therefore, the following code is good Racket style:

    ; Compute n!
    (define factorial
      (lambda (n)
        (if (zero? n)
            1
            (* n (factorial (- n 1))))))

Notice the closing parens at the end. A seasoned schemer won't see
those, though - the expression ends there, the next one begins at
column zero, so they know that everything is closed there.


### Indent subexpressions equally

Basic indentation in Racket is to indent subexpressions equally. This
is easiest seen in example:

    (list (foo)
          (bar)
          (baz))

As you can see, the expressions `(foo)`, `(bar)` and `(baz)` are all lined
up under each other. They're all on the same syntactic level - all are
arguments to `list` - so they should be lined up under each other.

There are exceptions,
such as `define` as shown above,
or `let`.
They get the body argument indented two spaces from
the definition:

    (let ((pi 3.14)
          (r 120))
      (* pi r r))

In general, DrRacket's automatic indentation does the right thing.


### Break for one - break for all

If you put subexpressions onto multiple lines,
put every subexpression on a single line.

For example, you can write

    (+ 1 foo bar baz)

but if one of those expressions gets more complicated, you may want it
on a line of its own. If so, put all of the subexpressions on lines
of their own:

    (+ 1
       (foo 3.5 a)
       bar
       baz)

If an argument list is broken, a seasoned schemer will expect to find
every argument on a line of its own, so putting more than one on any
of the lines will likely cause the extra argument to be missed.


## Other best practices

Consider this perfectly indented,
perhaps technically correct piece of code:

    (define helper5
      (lambda (x)
        (cond
          ((null? x)
           'error)
          ((null? (rest x))
           (length (first x)))
          ((> (length (first (rest x)))
              (length (first x)))
           (helper5 (cons (first x)
                          (rest (rest x)))))
          (else
           (helper5 (rest x))))))

Because the formatting rules above were followed to the letter,
with a little bit of training,
you will have no trouble figuring out where the subexpressions begin and end,
or which procedure is applied to which arguments.
Still,
even an experienced Racket programmer
will be unable at first glance
to understand what the procedure above does.

The guidelines below should help you
make sure your code is as clear as possible.


### Choose variable and procedure names carefully

Choosing descriptive names for your variables and procedures
is much more important - and much harder -
than you might suspect at first.

The reason it is important
becomes apparent when you try to read the code of
`helper5` above.
The name of something is the first,
immediately available piece of information
about what it is and how it behaves.
Hence,
the following procedure is somewhat easier to read
than the previous one,
even though it is identical
as far as the Racket interpreter is concerned:

    ; Length of the shortest element of a list of lists
    (define shortest-length
      (lambda (lists)
        (cond
          ((null? lists)
           'error)
          ((null? (rest lists))
           (length (first lists)))
          ((> (length (first (rest lists)))
              (length (first lists)))
           (shortest-length (cons (first lists)
                                  (rest (rest lists)))))
          (else
           (shortest-length (rest lists))))))

In fact,
the whole point of defining a procedure is *abstraction*:
we create a black box,
which can then be used as a building block in a more complex system,
with no concern about its inner workings.
From the name of a procedure and the associated comment,
one should be able to predict how the procedure will behave,
without having to study the details of its body.

This is why naming procedures is hard:
you need to reduce a potentially very complicated behavior
into a few words at most.
On the other hand, thinking of a good name
can help you think about
what it is that your procedure should be doing exactly.
And if you have a hard time coming up with an appropriate name,
then perhaps the outline of the black box
you're trying to create
is more complicated than it needs to be?


### Keep your procedures short

Shorter procedures are easier to get right,
read, reason about and debug.
Compare the above procedure with:

    ; Length of the shortest element in a list of lists
    (define shortest-length
      (lambda (lists)
        (smallest-element (lengths-of lists))))

    ; Find the smallest element in a list of numbers
    (define smallest-element
      (lambda (lst)
        (cond
          ((null? lst)
           'error)
          ((null? (rest lst))
           (first lst))
          (else
           (minimum (first lst)
                    (smallest-element (rest lst)))))))

    ; Choose the smaller one of two numbers
    (define minimum
      (lambda (x y)
        (if (< x y)
            x
            y)))

    ; Given a list of lists, build a list of their lengths
    (define lengths-of
      (lambda (lists)
        (cond
          ((null? lists)
           '())
          (else
           (cons (length (first lists))
                 (lengths-of (rest lists)))))))


### Avoid duplicating code

Consider this code:

    ; Days of the week
    (define days
      '(Mon Tue Wed Thu Fri Sat Sun))

    ; Return a random day of the week
    (define choose-random-day
      (lambda ()
        (list-ref days (random (length days)))))

    ; Take a list of dice (where a die is itself a list of face values),
    ; roll every die, and return the resulting score. For instance,
    ; if we roll the dice ((1 2 3 4 5 6) (1 2 3 4)), we might get the
    ; results 5 and 2, and return 7.
    (define roll-dice
      (lambda (dice)
        (cond
          ((null? dice) 0)
          (else (+ (list-ref (first dice)
                             (random (length (first dice))))
                   (roll-dice (rest dice)))))))

Both of these procedures contain the subexpression
`(list-ref <`*something*`> (random (length <`*something*`>)))`,
and so we may want to split that into an auxiliary procedure,
namely `pick-random`:

    ; Days of the week
    (define days
      '(Mon Tue Wed Thu Fri Sat Sun))

    ; Return a random day of the week
    (define choose-random-day
      (lambda ()
        (pick-random days)))

    ; Take a list of dice (where a die is itself a list of face values),
    ; roll every die, and return the resulting score. For instance,
    ; if we roll the dice ((1 2 3 4 5 6) (1 2 3 4)), we might get the
    ; results 5 and 2, and return 7.
    (define roll-dice
      (lambda (dice)
        (cond
          ((null? dice) 0)
          (else (+ (pick-random (first dice))
                   (roll-dice (rest dice)))))))

    ; Choose a random element from a list
    (define pick-random
      (lambda (lst)
        (list-ref lst
                  (random (length lst)))))

Code duplication is best avoided for several reasons.
If you write the same thing several times,
you're more likely to make a mistake.
If you have to modify it later on,
you might forget about some of the copies.
Whenever you find yourself typing the same thing several times,
it is generally a good indication that
you should be writing an auxiliary procedure.


<!-- TODO: update this section
### Avoid duplicating computations

You may have noticed another benefit
to rewriting the code above.
Before,
the `choose-random-move` procedure
had to compute the list of all `possible-moves`
three times:
to check whether there were any,
to count them, and
finally to look up the *n*th one among them.
Now,
the last two uses of `(possible-moves sum states)`
have been merged into one,
with the result passed to the `pick-random` procedure
we introduced.
Hence,
the resulting program will also be more efficient.

Now, it is tempting to apply the same principle
in order to merge the two remaining uses of
`(possible-moves sum states)` into one:

    (define choose-random-move
      (lambda (sum state)
        (pick-random-if-there-is-one
          (possible-moves sum state)))

    (define pick-random-if-there-is-one
      (lambda (lst)
        (cond
          ((null? lst) 'none)
          (else (pick-random lst)))))

However,
since we use `pick-random-if-there-is-one` only once,
and it is rather idiosyncratic
(and therefore unlikely to be needed again),
we can use
[the `let` syntax](http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%25_idx_124)
instead of defining a new procedure:

    (define choose-random-move
      (lambda (sum state)
        (let ((lst (possible-moves sum state)))
          (cond
            ((null? lst) 'none)
            (else (pick-random lst))))))

It is interesting to note that
`(let ((<`*x1*`> <`*v1*`>)` ...
      `(<`*xn*`> <`*vn*`>)) <`*body*`>)`
is actually just syntactic sugar for
`((lambda (<`*x1*`>` ... `<`*xn*`>) <`*body*`>)`
  `<`*v1*`>`
  ...
  `<`*vn*`>)`,
and so this new version
pretty much amounts to
replacing the constant `pick-random-if-there-is-one`
by its definition!
-->


### Use higher-order procedures

Sometimes it is not entirely obvious how to
package some redundant code into its own procedure.
Consider the following:

    ; Return a list of all even numbers in lst
    (define keep-even-numbers
      (lambda (lst)
        (cond
          ((null? lst)
           '())
          ((even? (first lst))
           (cons (first lst)
                 (keep-even-numbers (rest lst))))
          (else
           (keep-even-numbers (rest lst))))))

    ; Return a list of all multiples of three in lst
    (define keep-multiples-of-three
      (lambda (lst)
        (cond
          ((null? lst)
           '())
          ((= (remainder (first lst) 3)
              0)
           (cons (first lst)
                 (keep-multiples-of-three (rest lst))))
          (else
	   (keep-multiples-of-three (rest lst))))))

Clearly these two procedures have much code in common:
both are meant to filter a list
in order to keep only those elements which
satisfy a certain property
(such as being even, or a multiple of three).
The only difference between them
is the code used for testing
which elements qualify.
However, it may not be entirely obvious
how to factorize the common code (everything else)
into an auxiliary procedure.

Luckily, Racket procedures are values like any other,
and this can be used to inject some varying code
into a common template as a parameter.
In fact, in this case the common template is
the famous procedure `filter`:

    (define filter
      (lambda (pred? list)
        (cond
          ((null? list)
           '())
          ((pred? (car list))
           (cons (car list)
                 (filter pred? (cdr list))))
          (else
           (filter pred? (cdr list))))))

Then `keep-even-numbers` and `keep-multiples-of-three`
can be rewritten as:

    (define keep-even-numbers
      (lambda (lst)
        (filter even? lst)))

    (define keep-multiples-of-three
      (lambda (lst)
        (filter (lambda (n)
                  (= (remainder n 3)
                     0))
                lst)))

Procedures which take other procedures as arguments,
or which return a procedure as a result,
are called *higher order procedures*,
and they usually correspond to frequently-occurring
patterns of code.
In fact, one such pattern was also present
in the `lengths-of` procedure that we saw earlier:

    ; Given a list of lists, build a list of their lengths
    (define lengths-of
      (lambda (lists)
        (cond
          ((null? lists)
           '())
          (else
           (cons (length (car lists))
                 (lengths-of (cdr lists)))))))

The `lengths-of` procedure
evaluates to a list
consisting of the results
of applying the `length` function
to each element in an existing list.
But we know that this pattern is captured by
the `map` procedure,
hence `lengths-of` can be written as:

    ; Given a list of lists, build a list of their lengths
    (define lengths-of
      (lambda (lists)
        (map length lists)))

In fact,
to a seasoned Racket programmer,
`(map length lists)` is much more precise and evocative than
`(lengths-of lists)`,
therefore we may want to drop the `lengths-of` procedure altogether.


## Closing remarks

You may have noticed that in `filter` above,
the subexpression `(filter pred? (cdr list))`
appears twice.
We could have used `let` to factor it out,
however in this particular case,
it would have significantly complicated the code,
defeating the purpose.
Furthermore,
this would break
[tail call optimization](http://en.wikipedia.org/wiki/Tail_call).
The point is:
all of these rules are guidelines.
If you choose to break one, do so.
But be aware that you are breaking one,
and make sure that you have a good reason.

Another way to avoid duplicating code
is to use Racket's built-in procedures
when one is available that suits a given purpose.
Hence,
in the above,
we could have used `min`
instead of writing `minimum` by hand.
Even better,
since `min` can accept any number of arguments,
we could have used `(apply min lst)`
instead of writing a `smallest-element` procedure,
reducing the complicated procedure `shortest-length` even further,
to the simple expression `(apply min (map length lists))`.
Racket's built-in procedures are documented in
the [Racket Guide](http://docs.racket-lang.org/guide/index.html).


## Acknowledgments

This document is distributed under the
[Creative Commons Attribution-ShareAlike 2.0 license](http://creativecommons.org/licenses/by-sa/2.0/).
The [Markdown](http://daringfireball.net/projects/markdown/) source is available
[on github](https://github.com/jeremie-koenig/cs201-public).
It is derived from the
[style guide on schemewiki.org](http://community.schemewiki.org/?scheme-style)
(specifically,
the *Formatting* section was written based on
[this](http://community.schemewiki.org/?p=scheme-style&c=hv&t=1289999268)
version),
and draws inspiration from
[this excellent document from Dartmouth](http://web.archive.org/web/20020809131500/www.cs.dartmouth.edu/~cs18/F2002/handouts/scheme-tips.html)
as well.

Most of the *Other best practices* section
was written by [Jérémie Koenig](http://www.cs.yale.edu/homes/jkoenig)
with input from [Patrick Paczkowski](http://graphics.cs.yale.edu/site/people/patrick-paczkowski)
and the rest of the
[CS201 staff](http://zoo.cs.yale.edu/classes/cs201/Fall_2013/contact.html)
at Yale University for the fall of 2013.

