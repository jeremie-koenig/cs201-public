## Formatting

Because the syntax of Scheme is so uniform,
it is very important
that you organize your code on the page
in a way which makes its structure evident.
Most Scheme programmers employ the rules below.
If you adopt them,
you will never need to scan your code for matching parentheses;
instead, you will recognize the nesting
and content of an expression by the form of the code.

Note that DrRacket helpfully provides an automatic indentation feature:
if you select a block of code and hit the *Tab* key,
the horizontal alignment of each line in the block
will be adjusted to match the nesting of your code.

All of these rules are guidelines.
If you choose to break one, do so.
But be aware that you are breaking one,
and make sure that you have a good reason.

### Avoid long lines

Long lines in Scheme programs are usually very hard to decipher.
Consider even the simple procedure below:

    (define filter (lambda (pred? lst)
      (cond
        ((null? lst) '())
        ((pred? (car lst)) (cons (car lst) (filter pred? (cdr lst))))
        (else (filter pred? (cdr lst))))))

The second `cond` clause is hard to read, because
your eyes and brain need to figure out where
the condition ends and result expression begins,
and even then
the boundaries of the arguments to `cons`
are not entierly obvious.

In general,
you will want to break lines
immediately after you close one or more parentheses:

    (+ (* 2 3)
       (/ 17 5))

Notice how the closing parenthesis in the product closes the line as well.
This is a good rule of thumb to avoid too complex forms on a line
which would be difficult to read.
Reformatting `filter` above using this rule
gives us the more readable:

    (define filter
      (lambda (pred? lst)
        (cond
          ((null? lst)
           '())
          ((pred? (car lst))
           (cons (car lst)
                 (filter pred? (cdr lst))))
          (else
           (filter pred? (cdr lst))))))


### Indent subexpressions equally

Basic indentation in Scheme is to indent subexpressions equally. This
is easiest seen in example:

    (list (foo)
          (bar)
          (baz))

As you can see, the expressions `(foo)`, `(bar)` and `(baz)` are all lined
up under each other. They're all on the same syntactic level - all are
arguments to `list` - so they should be lined up under each other.

There are exceptions,
such as `define` as shown above,
or `let`.
They get the body argument indented two spaces from
the definition:

    (let ((pi 3.14)
          (r 120))
      (* pi r r))

In general, DrRacket's automatic indentation does the right thing.


### Break for one - break for all

If you put subexpressions onto multiple lines,
put every subexpression on a single line.

For example, you can write

    (+ 1 foo bar baz)

but if one of those expressions gets more complicated, you may want it
on a line of its own. If so, put all of the subexpressions on lines
of their own:

    (+ 1
       (foo 3.5 a)
       bar
       baz)

If an argument list is broken, a seasoned schemer will expect to find
every argument on a line of its own, so putting more then one on any
of the lines will likely cause the extra argument to be missed.


### Parens tend to feel lonely

Don't put closing (or opening) parens on a line of their own. They get
lonely easily. Seriously, it's superfluous information and takes up
lines for nothing. Therefore, the following code is good Scheme style:

    (define (fac n)
      (if (zero? n)
          1
          (* n (fac (- n 1)))))

Notice the closing parens at the end. A seasoned schemer won't see
those, though - the expression ends there, the next one begins at
column zero, so he knows that everything is closed there.


### Further information

These are the most important conventions. There are other important
ones, though.

When people are looking through your code, they are expecting to see
certain typographical notations to tell them more about what kind of
variable or procedure it is. For instance, type conversion uses
*old-type*`->`*new-type*. This sub-syntax for variable naming
is further described on [[variable-naming-convention]]

When writing your comments, try to follow good [[comment-style]].

### Other sources

  * [Scheme Tips from Dartmouth](http://web.archive.org/web/20020809131500/www.cs.dartmouth.edu/~cs18/F2002/handouts/scheme-tips.html)

